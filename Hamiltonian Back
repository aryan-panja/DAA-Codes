
Certainly! Here's the pseudo code written in words:

1. **isSafe Function**:
   - This function checks whether adding a vertex `v` to the current position `pos` in the path is safe.
   - It verifies if there is an edge between the last vertex in the path and vertex `v` to ensure connectivity.
   - Additionally, it checks if vertex `v` is already included in the path to avoid cycles.

2. **hamCycleUtil Function**:
   - This recursive function is used to find the Hamiltonian cycle.
   - If all vertices have been visited (`pos == V`), it checks if there is an edge between the last and first vertices in the path to form a cycle.
   - It iterates through all vertices as potential next vertices in the Hamiltonian cycle, exploring all possible paths.

3. **hamCycle Function**:
   - This main function orchestrates the process of finding the Hamiltonian cycle.
   - It initializes the path with all vertices set to -1 except the first vertex.
   - Then, it calls the `hamCycleUtil` function to find the Hamiltonian cycle, starting from the second vertex.
   - If no Hamiltonian cycle is found, it prints "Solution does not exist".

4. **printSolution Function**:
   - This function prints the Hamiltonian cycle if one exists.
   - It displays the vertices of the Hamiltonian cycle found.

5. **Main Function**:
   - In the `main` function:
     - Two sample graphs, `graph1` and `graph2`, are initialized as adjacency matrices.
     - The `hamCycle` function is called for each graph to find and print the Hamiltonian cycle if it exists.

This pseudo code outlines the steps involved in finding the Hamiltonian cycle in a graph and printing the result accordingly.



#include <iostream>
using namespace std;

#define V 5 

void printSolution(int path[]); 

bool isSafe(int v, bool graph[V][V], 
            int path[], int pos) 
{ 
    if (graph [path[pos - 1]][ v ] == 0) 
        return false; 

    for (int i = 0; i < pos; i++) 
        if (path[i] == v) 
            return false; 

    return true; 
} 

bool hamCycleUtil(bool graph[V][V], 
                  int path[], int pos) 
{ 
    if (pos == V) 
    { 
        if (graph[path[pos - 1]][path[0]] == 1) 
            return true; 
        else
            return false; 
    } 

    for (int v = 1; v < V; v++) 
    { 
        if (isSafe(v, graph, path, pos)) 
        { 
            path[pos] = v; 

            if (hamCycleUtil (graph, path, pos + 1) == true) 
                return true; 

            path[pos] = -1; 
        } 
    } 

    return false; 
} 

bool hamCycle(bool graph[V][V]) 
{ 
    int *path = new int[V]; 
    for (int i = 0; i < V; i++) 
        path[i] = -1; 

    path[0] = 0; 
    if (hamCycleUtil(graph, path, 1) == false ) 
    { 
        cout << "\nSolution does not exist"; 
        return false; 
    } 

    printSolution(path); 
    return true; 
} 

void printSolution(int path[]) 
{ 
    cout << "Solution Exists:"
            " Following is one Hamiltonian Cycle \n"; 
    for (int i = 0; i < V; i++) 
        cout << path[i] << " "; 

    cout << path[0] << " "; 
    cout << endl;
} 

int main() 
{ 

    bool graph1[V][V] = {{0, 1, 0, 1, 0}, 
                        {1, 0, 1, 1, 1}, 
                        {0, 1, 0, 0, 1}, 
                        {1, 1, 0, 0, 1}, 
                        {0, 1, 1, 1, 0}}; 

    hamCycle(graph1); 

    bool graph2[V][V] = {{0, 1, 0, 1, 0}, 
                         {1, 0, 1, 1, 1}, 
                         {0, 1, 0, 0, 1}, 
                         {1, 1, 0, 0, 0}, 
                         {0, 1, 1, 0, 0}}; 

    hamCycle(graph2); 

    return 0; 
} 
